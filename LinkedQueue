package jsjf;

import exceptions.EmptyCollectionException;

public class LinkedStack<T> implements StackADT<T> {

	private int count;
	private LinearNode<T> top;

	public LinkedStack() {
		count = 0;
		top = null;
	}
	
	@Override
	public void push(T element) {
		LinearNode<T> temp = new LinearNode<T>(element);
		temp.setNext(top);
		top = temp;
		count++;
	}

	@Override
	public T pop() {
		if (isEmpty())
			throw new EmptyCollectionException("stack");
		
		T result = top.getElement();
		top = top.getNext();
		count--;
		
		return result;
	}

	@Override
	public T peek() {
		if (isEmpty())
			throw new EmptyCollectionException("stack");
		
		return top.getElement();
	}

	@Override
	public boolean isEmpty() {
		return (count==0);
	}

	@Override
	public int size() {
		return count;
	}

	@Override
	public String toString() {
		LinearNode<T> current;
		current = top;
		String s = "";
		while (current != null) {
			s += current.getElement().toString() + "\n";
			current = current.getNext();
		}
		return s;
	}
}
